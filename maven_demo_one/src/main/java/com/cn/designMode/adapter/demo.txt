适配器模式：
1）适配器模式将某个类的接口转换成客户端期望的另一个接口表示，主的目的是兼容性，
让原本因接口不匹配不能一起工作的两个类可以协同工作。其别名为包装器。
2）适配器模式属于结构性模式
3）主要分为三类：类适配器模式、对象适配器模式、接口适配器模式

工作原理：
1）适配器模式：将一个类的接口转换成另一种接口，让原本接口不兼容的类可以兼容。
2）从用户的角度看不到被适配者，是解耦的。
3）用户调用适配器转化出来的目标接口方法，适配器再调用被适配者的相关接口方法。
4）用户收到反馈结果，感觉只是和目标接口交互。

类适配器：
基本介绍：Adapter类，通过继承src类，实现dst类接口，完成src -> dst的适配
对象适配器：
1）基本思路和类的适配器模式相同，只是将Adapter类做修改，不能继承src类，而是持有src类的实例，
以解决兼容性的问题。即：持有src类，实现dst类接口，完成src > dst的适配。
2）根据"合成复用原则"，在系统中尽量使用关联关系来替代继承关系。
3）对象适配器模式是适配器模式常用的一种。
接口适配器模式：
1）一些书籍称为：适配器模式或缺省适配器模式。
2）当不需要全部实现接口提供的方法时，可先设计一个抽象类实现接口，并为该接口中每个方法提供一个
默认实现（空方法），那么该抽象类的子类可有选择地覆盖父类的某些方法来实现需求。
3）适用于一个接口不想使用其所有的方法的情况。

适配器模式在SpringMVC框架应用的源码分析：
1）SpringMvc中的HandlerAdapter，就使用了适配器模式。
2）SpringMvc处理请求的流程回顾。
3）使用HandlerAdapter的原因分析：
可以看到处理器的类型不同，有多重实现方式，那么调用方式就不是确定的，如果需要直接调用Controller方法，
需要调用的时候就得不断是使用if else来进行判断是哪一种子类然后执行。那么如果后面要扩展Controller，
就得修改原来的代码，这样违背了OCP原则。

适配器模式的注意事项和细节
1）三种命名方式，是根据src是以怎样的形式给到Adapter（在Adapter里的形式）来命名的。
2）类适配器：以类给到，在Adapter里，就是将src当作类，继承
对象适配器：以对象给到，在Adapter里，将src作为一个对象，持有
接口适配器：以接口给到，在Adapter里，将src作为一个接口，实现
3）Adapter模式最大的作用还是将原本不兼容的接口融合在一起工作。
4）实际开发中，实现起来不拘泥于我们讲解的这三种经典形式。