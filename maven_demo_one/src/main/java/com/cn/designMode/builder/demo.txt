建造者模式：
1）建造者模式又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），
使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。
2）建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建它们，
用户不需要知道内部的具体构建细节。

建造者模式的四个角色：
1）Product(产品角色)：一个具体的产品对象。
2）Builder(抽象建造者)：创建一个Product对象的各个部件指定的接口/抽象类。
3）ConcreteBuilder(具体建造者)：实现接口，构建和装配各个部件。
4）Director(指挥者)：构建一个使用Builder接口的对象，它主要是用于创建一个复杂的对象。
它主要有两个作用，一是：隔离了客户与对象的生成过程，二是：负责控制产品对象的生产过程。

建造者模式在JDK的应用和源码分析
StringBuilder
Appendable 接口定义了多个append方法（抽象方法），即Appendable为抽象建造者，定义了抽象方法。
AbstractStringBuilder 实现了Appendable接口方法，这里的AbstractStringBuilder已经是建造者，只是不能实例化
StringBuilder 既充当了指挥者角色，同时充当了具体的建造者，建造方法的实现是由AbstractStringBuilder完成，
而StringBuilder继承了。

建造者模式的注意事项和细节：
1）客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，
使得相同的创建过程可以创建不同的产品对象。
2）每一个具体建造者都相对独立，而与其他的具体建造者无关，因此可以很方便地替换具体建造者或增加新的具体建造者，
用户可以使用不同的具体建造者即可得到不同的产品对象。
3）可以更加精细地控制产品的创建过程稿。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，
也更方便使用程序来控制创建过程。
3）增加新的具体建造者无需修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合"开闭原则"。